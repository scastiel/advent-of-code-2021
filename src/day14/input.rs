use std::collections::HashMap;

use super::Input;

#[allow(dead_code)]
pub fn example() -> Input {
    Input {
        template: "NNCB".to_string(),
        insertion_rules: HashMap::from([
            (('C', 'H'), 'B'),
            (('H', 'H'), 'N'),
            (('C', 'B'), 'H'),
            (('N', 'H'), 'C'),
            (('H', 'B'), 'C'),
            (('H', 'C'), 'B'),
            (('H', 'N'), 'C'),
            (('N', 'N'), 'C'),
            (('B', 'H'), 'H'),
            (('N', 'C'), 'B'),
            (('N', 'B'), 'B'),
            (('B', 'N'), 'B'),
            (('B', 'B'), 'N'),
            (('B', 'C'), 'B'),
            (('C', 'C'), 'N'),
            (('C', 'N'), 'C'),
        ]),
    }
}

pub fn exercise() -> Input {
    Input {
        template: "NBOKHVHOSVKSSBSVVBCS".to_string(),
        insertion_rules: HashMap::from([
            (('S', 'N'), 'H'),
            (('K', 'P'), 'O'),
            (('C', 'P'), 'V'),
            (('F', 'N'), 'P'),
            (('F', 'V'), 'S'),
            (('H', 'O'), 'S'),
            (('N', 'S'), 'N'),
            (('O', 'P'), 'C'),
            (('H', 'C'), 'S'),
            (('N', 'P'), 'B'),
            (('C', 'F'), 'V'),
            (('N', 'N'), 'O'),
            (('O', 'S'), 'F'),
            (('V', 'O'), 'V'),
            (('H', 'K'), 'N'),
            (('S', 'V'), 'V'),
            (('V', 'C'), 'V'),
            (('P', 'H'), 'K'),
            (('N', 'H'), 'O'),
            (('S', 'B'), 'N'),
            (('K', 'S'), 'V'),
            (('C', 'B'), 'H'),
            (('S', 'S'), 'P'),
            (('S', 'P'), 'H'),
            (('V', 'N'), 'K'),
            (('V', 'P'), 'O'),
            (('S', 'K'), 'V'),
            (('V', 'F'), 'C'),
            (('V', 'V'), 'B'),
            (('S', 'F'), 'K'),
            (('H', 'H'), 'K'),
            (('P', 'V'), 'V'),
            (('S', 'O'), 'H'),
            (('N', 'K'), 'P'),
            (('N', 'O'), 'C'),
            (('O', 'N'), 'S'),
            (('P', 'B'), 'K'),
            (('V', 'S'), 'H'),
            (('S', 'C'), 'P'),
            (('H', 'S'), 'P'),
            (('B', 'S'), 'P'),
            (('C', 'S'), 'P'),
            (('V', 'B'), 'V'),
            (('B', 'P'), 'K'),
            (('F', 'H'), 'O'),
            (('O', 'F'), 'F'),
            (('H', 'F'), 'F'),
            (('F', 'S'), 'C'),
            (('B', 'N'), 'O'),
            (('N', 'C'), 'F'),
            (('F', 'C'), 'B'),
            (('C', 'V'), 'V'),
            (('H', 'N'), 'C'),
            (('K', 'F'), 'K'),
            (('O', 'O'), 'P'),
            (('C', 'C'), 'S'),
            (('F', 'F'), 'C'),
            (('B', 'C'), 'P'),
            (('P', 'P'), 'F'),
            (('K', 'O'), 'V'),
            (('P', 'C'), 'B'),
            (('H', 'B'), 'H'),
            (('O', 'B'), 'N'),
            (('O', 'V'), 'S'),
            (('K', 'H'), 'B'),
            (('B', 'O'), 'B'),
            (('H', 'V'), 'P'),
            (('B', 'V'), 'K'),
            (('P', 'S'), 'F'),
            (('C', 'H'), 'C'),
            (('S', 'H'), 'H'),
            (('O', 'K'), 'V'),
            (('N', 'B'), 'K'),
            (('B', 'F'), 'S'),
            (('C', 'O'), 'O'),
            (('N', 'V'), 'H'),
            (('F', 'B'), 'K'),
            (('F', 'O'), 'C'),
            (('C', 'K'), 'P'),
            (('B', 'H'), 'B'),
            (('O', 'H'), 'F'),
            (('K', 'B'), 'N'),
            (('O', 'C'), 'K'),
            (('K', 'K'), 'O'),
            (('C', 'N'), 'H'),
            (('F', 'P'), 'K'),
            (('V', 'H'), 'K'),
            (('V', 'K'), 'P'),
            (('H', 'P'), 'S'),
            (('F', 'K'), 'F'),
            (('B', 'K'), 'H'),
            (('K', 'V'), 'V'),
            (('B', 'B'), 'O'),
            (('K', 'C'), 'F'),
            (('K', 'N'), 'C'),
            (('P', 'O'), 'P'),
            (('N', 'F'), 'P'),
            (('P', 'N'), 'S'),
            (('P', 'F'), 'S'),
            (('P', 'K'), 'O'),
        ]),
    }
}
